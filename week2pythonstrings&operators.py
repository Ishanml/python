# -*- coding: utf-8 -*-
"""Week2pythonstrings&operators.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x4qkPCJfE8zVHcI_al2l2l1XtWG_YEuO

#Logical Operators
1. And
2. or
3. not
"""

True and True

True or False

START = True
STOP = False

# Print the values as it is
print(f"Defined value of START = {START}")
print(f"Defined value of STOP = {STOP}\n")

# if can also be written as -
print(f"Defined value of START = {START}")
print(f"Value of STOP by negating START = {not START}\n")

# alternatively -
print(f"Value of START by negating STOP = {not STOP} ")
print(f"Defined value of STOP = {STOP} \n")

not True

not bool(0)

int(bool(0))

#typecasting
not int(bool(0))

bool(1)

not int(bool(1))

not 1

not 0

START = 1
STOP = 0

# Print the values as it is
print(f"Defined value of START = {START}")
print(f"Defined value of STOP = {STOP}\n")

# if can also be written as -
print(f"Defined value of START = {START}")
print(f"Value of STOP by negating START = {int(not START)}\n")

# alternatively -
print(f"Value of START by negating STOP = {int(not STOP)} ")
print(f"Defined value of STOP = {STOP} \n")

zero = 0
one = 1

print(f"boolean value of no. {zero} is {bool(zero)}")
print(f"boolean value of no. {one} is {bool(one)}")
print(f"negation of {zero} is {not zero} and negation of {one} is {not one}")
print("\n#-----------------#\n")

Some_negative_integer = -5
Some_positive_integer = 5

print(f"boolean value of no. {Some_negative_integer} is {bool(Some_negative_integer)}")
print(f"boolean value of no. {Some_positive_integer} is {bool(Some_positive_integer)}")
print(f"negation of {Some_negative_integer} is {not Some_negative_integer} \
and negation of {Some_positive_integer} is {not Some_positive_integer}")

bool(-5)

bool(5)

not -5

Some_negative_float = -5.99
Some_positive_float = 5.6

print(f"boolean value of no. {Some_negative_float} is {bool(Some_negative_float)}")
print(f"boolean value of no. {Some_positive_float} is {bool(Some_positive_float)}")
print(f"negation of {Some_negative_float} is {not Some_negative_float} \
and negation of {Some_positive_float} is {not Some_positive_float}")

"""## Logical And"""

VEGETABLES = True
SALT = False
DISH = VEGETABLES and SALT

print(f"Dish contains VEGETABLES: {VEGETABLES}")
print(f"Dish contains SALT: {SALT}")
print(f"Hence dish prepared was good: {DISH}\n")

True * False

not(False) * True

False * False

False * (not(False))

1+2*3

not(False) * False == True

print(not(False) * False == True)

print((not(False)) * False == True)

print((not(False)) * False)

2*3+40/5

(2*3+40)/5

False * True

0 * 1

not(False*True)

not(1)

not False * True == True

lst_a = [1,2,3,4]
lst_b = [1,2,3,4]

id(lst_a)

id(lst_b)

print(id(lst_a))

print(id(lst_b))

lst_a is lst_b

lst_a = [1,2,3,4]
lst_b = lst_a

print(id(lst_a))
print(id(lst_b))

lst_a is lst_b

lst_a = [1,2,3,4]
lst_b = [1,2,3,4]

lst_a is not lst_b

lst_a == lst_b

a = 2
b = 2

print(id(a))
print(id(b))

str1 = 'Krish'
str2 = 'Krish'
print(id(str1))
print(id(str2))

## immutable
str1 = 'Krish'
str2 = 'Krish1'
print(id(str1))
print(id(str2))

lst_a

lst_a[0]

lst_a[0] = 10

lst_a

str1

##immutable   str1[0] = 'N'

##comparison operator
maxium_speed_of_bike = 150
max_speed_of_car = 200

print(f"bike is faster than car: {maxium_speed_of_bike > max_speed_of_car}")

##comparison operator
maxium_speed_of_bike = 150
max_speed_of_car = 200

print(f"bike is faster than car: {maxium_speed_of_bike < max_speed_of_car}")

"""## Arithmetic Operations"""

a = 25
b = 101

b//a

b%a

var = 10
bin(var)

~var

True | False

var >> 1

var << 1

"""## strings"""

'Krish'
"Welcome to the Data Science masters"

str1 = "Welcome to Data Science Masters"

type(str1)

## immutable
#str1[0] = 12

str1 = "Krish Naik"

str1

welcome = "Hello World"

#dir(welcome.)

string = "Pw Skills Data Science"

string[5]

# slice operation
string[5:]

# slice operation
string[5:11]

string[-1]

string[-1:]

string[-3:]

string[-7:5]

string[5:-5]

string[-10:10]

string[:-1]

string[:]

name = "Karthik"
name[-5:4]

string

string[::-1]

string[::-2]

string[-10:10:-1]

string[6:3:-1]

string[6::-1]

string[::2]

name = "Krish"

name[::-1]

name[::-3]

name[4::-1]

name[3:1:-1]

course_name = "Data Science Masters"

course_name[5:12]

course_name[11:4:-1]

# concatenation
course_name + "Course"

print("Hello" + "Worlds")

course_name *5

len(course_name)

## find function
course_name.find("n")

course_name.find("a",2,10)

course_name.find("z")

course_name

## count()
course_name.count("a")

course_name.count(" ")

course_name.count("")

# string split function

course_name.split(' ')

course_name.split('S')

course_name.partition('S')

course_name.partition('s')

course_name.split('s')

## String upper and lowercase
course_name.upper()

course_name.lower()

course_name.swapcase()

course_name.title()

name = "ishan sharma"

name.title()

course_name[12::-1]

course_name[12:4:-1]

len(course_name)

course_name.count('')

#H.W
size = int(input("Enter the triangle Length:"))
for i in range(size):
    for j in range(size-i):
        print("",end=" ")
    for k in range(i+1) :
        print("*",end="")
    for m in range(k-1):
        print("*", end="")
    print()

course_name

course_name.upper().count('N')

# solution 2
n = 10
for i in range(n):
    print(" "*(n-i),end='')
    for j in range(i*2+1):
        print("*",end="")
    print()

course_name

course_name.split()